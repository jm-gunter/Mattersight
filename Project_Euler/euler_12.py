#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

#Let us list the factors of the first seven triangle numbers:

# 1: 1
# 3: 1,3
# 6: 1,2,3,6
#10: 1,2,5,10
#15: 1,3,5,15
#21: 1,3,7,21
#28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.

#What is the value of the first triangle number to have over five hundred divisors?

import math

def tri_num(n):
    return int((n)*(n+1)/2)

def get_divisors(n):
    divisors = []
    limit = math.ceil(math.sqrt(n))
    for i in range(1, limit):
        if n % i == 0:
            divisors.append(i)
            divisors.append(n/i)
    return divisors

def find_tri_number(num_divisors):
    n = 1
    divisors = []
    y = 0
    while len(divisors) < num_divisors:
        y = tri_num(n)
        divisors = get_divisors(y)
        n += 1
    return y


if __name__ == '__main__':
    #print(tri_num(500))
    #(get_divisors(50000))
    print(find_tri_number(500))
